import argparse
from copy import copy

from exchangelib import Credentials, Configuration, Account
from exchangelib.protocol import BaseProtocol, NoVerifyHTTPAdapter

from plugins.Exchange import PluginExchangeBase
from utils import output
from utils.consts import AllPluginTypes
import urllib3


class PluginExchangeEmailContextSearch(PluginExchangeBase):
    display = "邮件内容搜索"
    alias = "ex_em_s"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display

        parser.add_argument("-d", "--domain", help="domain name.Format(domain.com)", required=True, dest="domain")
        parser.add_argument("-u", "--username", help="username to login", required=False, dest="username")
        parser.add_argument("-p", "--password", help="password", required=False, dest="password")
        parser.add_argument("-i", "--ip", help="target address", required=False,dest="ip")
        parser.add_argument("-s", "--string", help="search string", required=True, dest="search_string")

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)

        ex = ExchangeTool(args.domain, args.username, args.password, args.ip)
        ex.search_email_context(args.search_string)

        return result


class ExchangeTool:
    def __init__(self, domain_name, username, password, target_address):

        BaseProtocol.HTTP_ADAPTER_CLS = NoVerifyHTTPAdapter
        urllib3.disable_warnings()

        user = f"{username}@{domain_name}"
        credentials = Credentials(user, password)
        config = Configuration(server=target_address, credentials=credentials)
        self.account = Account(user, config=config, autodiscover=False, credentials=credentials)

    def search_email_context(self, context):
        email_result = f"subject{'':^30}sender{'':^20}body\n"

        for item in self.account.inbox.all().order_by('subject'):
            if context == "" and item.body is not None:
                email_result += f"{'':^4}{item.subject}{'':^30}{item.sender.email_address}{'':^20}{item.body}\n"
                continue

            if item.body is not None and context in item.body and item.body.strip() != "":
                email_result += f"{'':^4}{item.subject}{'':^30}{item.sender.email_address}{'':^20}{item.body}\n"

        output.success(email_result)