import argparse
from copy import copy

from impacket.examples.smbclient import MiniImpacketShell
from impacket.smbconnection import SMBConnection

from plugins.AD import PluginAdExploitBase, parse_user_args
from utils import output
from utils.consts import AllPluginTypes


class PluginADImpacketSMBClient(PluginAdExploitBase):
    display = "smb client"
    alias = "imp_smb_client"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display

        parser.add_argument("-d", "--domain", help="dc fqdn (dc01.test.lab)", required=True, dest="domain")
        parser.add_argument("-u", "--username", help="username", required=True, dest="username")
        parser.add_argument("-p", "--password", help="password", required=False, dest="password")
        
        parser.add_argument('--file', type=argparse.FileType('r'),
                            help='input file with commands to execute in the mini shell')

        group = parser.add_argument_group('authentication')

        group.add_argument('--hashes', action="store", metavar="LMHASH:NTHASH",
                           help='NTLM hashes, format is LMHASH:NTHASH')
        group.add_argument('--no-pass', action="store_true", help='don\'t ask for password (useful for -k)')
        group.add_argument('-k', action="store_true",
                           help='Use Kerberos authentication. Grabs credentials from ccache file '
                                '(KRB5CCNAME) based on target parameters. If valid credentials '
                                'cannot be found, it will use the ones specified in the command '
                                'line')
        group.add_argument('--aesKey', action="store", metavar="hex key",
                           help='AES key to use for Kerberos Authentication '
                                '(128 or 256 bits)')

        group = parser.add_argument_group('connection')

        group.add_argument('--dc-ip', action='store', metavar="ip address",
                           help='IP Address of the domain controller. If omitted it will use the domain part (FQDN) specified in '
                                'the target parameter')
        group.add_argument('--target-ip', action='store', metavar="ip address",
                           help='IP Address of the target machine. If omitted it will use whatever was specified as target. '
                                'This is useful when target is the NetBIOS name and you cannot resolve it')
        group.add_argument('--port', choices=['139', '445'], nargs='?', default='445', metavar="destination port",
                           help='Destination port to connect to SMB Server')

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)

        _, domain, address, _, _ = parse_user_args(args)
        username, password = args.username, args.password

        if args.target_ip is None:
            args.target_ip = address

        if domain is None:
            domain = ''

        if args.aesKey is not None:
            args.k = True

        if args.hashes is not None:
            lmhash, nthash = args.hashes.split(':')
        else:
            lmhash = ''
            nthash = ''

        try:
            smbClient = SMBConnection(address, args.target_ip, sess_port=int(args.port))
            if args.k is True:
                smbClient.kerberosLogin(username, password, domain, lmhash, nthash, args.aesKey, args.dc_ip)
            else:
                smbClient.login(username, password, domain, lmhash, nthash)

            shell = MiniImpacketShell(smbClient)

            if args.file is not None:
                output.info("Executing commands from %s" % args.file.name)
                for line in args.file.readlines():
                    if line[0] != '#':
                        print("# %s" % line, end=' ')
                        shell.onecmd(line)
                    else:
                        print(line, end=' ')
            else:
                shell.cmdloop()
        except Exception as e:
            output.error(str(e))

        return result
