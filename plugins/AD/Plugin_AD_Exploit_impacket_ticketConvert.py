import argparse
import struct
from copy import copy

from impacket.krb5.ccache import CCache

from plugins.AD import PluginAdExploitBase
from utils import output
from utils.consts import AllPluginTypes


class PluginADImpacketTicketConvert(PluginAdExploitBase):
    display = "ticket convert"
    alias = "tik_conv"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display

        parser.add_argument('-i', required=True, help="File in kirbi (KRB-CRED) or ccache format", dest="input")
        parser.add_argument('-o', required=True, help="Output file", dest="output")

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)

        if is_kirbi_file(args.input_file):
            output.info('converting kirbi to ccache...')
            convert_kirbi_to_ccache(args.input, args.output)
            output.info('done')
        elif is_ccache_file(args.input_file):
            output.info('converting ccache to kirbi...')
            convert_ccache_to_kirbi(args.input_file, args.output_file)
            output.info('done')
        else:
            output.info('unknown file format')

        return result


def is_kirbi_file(filename):
    with open(filename, 'rb') as fi:
        fileid = struct.unpack(">B", fi.read(1))[0]
    return fileid == 0x76


def is_ccache_file(filename):
    with open(filename, 'rb') as fi:
        fileid = struct.unpack(">B", fi.read(1))[0]
    return fileid == 0x5


def convert_kirbi_to_ccache(input_filename, output_filename):
    ccache = CCache.loadKirbiFile(input_filename)
    ccache.saveFile(output_filename)


def convert_ccache_to_kirbi(input_filename, output_filename):
    ccache = CCache.loadFile(input_filename)
    ccache.saveKirbiFile(output_filename)
