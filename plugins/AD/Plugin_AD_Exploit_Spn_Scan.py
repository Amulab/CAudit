import argparse
from copy import copy

import ldap3

from plugins.AD import PluginAdExploitBase
from utils import output
from utils.consts import AllPluginTypes

from ldap3 import Server, Connection, SUBTREE
from pyasn1.type import univ, namedtype, namedval, tag, constraint



class LDAPString(univ.OctetString):
    encoding = 'utf-8'
class LDAPDN(LDAPString):
    pass
class AttributeValue(univ.OctetString):
    pass
class AttributeDescription(LDAPString):
    pass


class PartialAttribute(univ.Sequence):
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('type', AttributeDescription()),
        namedtype.NamedType('vals', univ.SetOf(componentType=AttributeValue()))
    )

class PartialAttributeList(univ.SequenceOf):
    componentType = PartialAttribute()


class SearchResultEntry(univ.Sequence):
    tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 4))
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('objectName', LDAPDN()),
        namedtype.NamedType('attributes', PartialAttributeList())
    )





class PluginADSpnScan(PluginAdExploitBase):
    """
    spn 扫描
    """

    display = "用户spn扫描"
    alias = "spn_scan"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description=self.display
        parser.add_argument("-d","--domain", help="dc fqdn(dc01.test.lab)", required=True,dest="domain")
        parser.add_argument("--dc-ip", help="Domain Controller ip address",required=False,dest="dc_ip")
        parser.add_argument("-u", "--username", help="username", required=False, dest="username")
        parser.add_argument("-p", "--password", help="password", required=False, dest="password")
        parser.add_argument("--hash",help='NTLM hashes, format is LMHASH:NTHASH',required=False,metavar="LMHASH:NTHASH", dest="hash")
        #parser.add_argument("--hash", help="NTLM hashes,format is LMHASH:NTHASH", required=False, dest="hash")
        #parser.add_argument("--dc-host", help="Domain Controller hostname", required=False, dest="dc_host")


    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """

        result = copy(self.result)
        _domain_fqdn:str =args.domain
        _domain_name=".".join(_domain_fqdn.split(".")[-2:])
        _dc_ip=args.dc_ip
        _username=args.username
        _password=args.password
        _hash=args.hash
        #_target_hostname=args.target
        #_dc_host=args.dc_host
        #attackeraccount = [f"{_domain_name}\\{_username}", _password]
        #连接到LDAP
        # try:
        #     if _hash:
        #         attackerpassword = ("aad3b435b51404eeaad3b435b51404ee:" + _hash.split(":")[1]).upper()
        #     else:
        #         attackerpassword = attackeraccount[1]
        #     output.info('Starting Resource Based Constrained Delegation Attack against {}$'.format(_target_hostname))
        #     output.info('Initializing LDAP connection to {}'.format(_dc_ip))
        #     serv = ldap3.Server(_dc_ip, tls=False, get_info=ldap3.ALL)
        #     if args.ticket:
        #         output.info('Using Kerberos authentication')
        #         conn = ldap3.Connection(serv, authentication=ldap3.SASL, sasl_mechanism=ldap3.KERBEROS)
        #     else:
        #         output.info('Using {} account with password ***'.format(attackeraccount[0]))
        #         conn = ldap3.Connection(serv, user=attackeraccount[0], password=attackerpassword,
        #                                 authentication=ldap3.NTLM)
        #     conn.bind()
        #     output.info('LDAP bind OK')
        #     output.info('Initializing domainDumper()')
        # except Exception as e:
        #     pass


        # 连接到LDAP
        user=_username
        user+=",Users,"
        user+=_domain_name
        password=_password
        Server1 = Server(_dc_ip)
        conn = Connection(Server1, user=user, password=password,auto_bind=True)

        #构建过滤器
        filter_spn="servicePrincipalName=*"
        filter_person="objectCategory=person"
        filter_not_disabled="!(userAccountControl:1.2.840.113556.1.4.803:=2)"
        searchFileter = "(&"
        searchFileter += "(" + filter_person + ")"
        searchFileter += "(" + filter_not_disabled + ")"
        searchFileter += "(" + filter_spn + "))"

        search_base = "DC=lohack,DC=com"
        attributes = ['servicePrincipalName', 'sAMAccountName', 'pwdLastSet', 'MemberOf', 'userAccountControl',
                      'lastLogon']
        #查询结果
        try:
            resp = conn.extend.standard.paged_search(search_base=search_base,
                                    search_filter=searchFileter,
                                    attributes=attributes,
                                    search_scope=SUBTREE
                                    )
            for entry in resp:
                if isinstance(entry, SearchResultEntry) is not True:
                    continue

        except Exception as a:
            pass


        return result
# def ldsz():
#     Server1 = Server("192.168.50.25")
#     conn = Connection(Server1, "CN=administrator,CN=Users,DC=lohack,DC=com", password="Zawx@2023",
#                       auto_bind=True)
#
#     # 构建过滤器
#     filter_spn = "servicePrincipalName=*"
#     filter_person = "objectCategory=person"
#     filter_not_disabled = "!(userAccountControl:1.2.840.113556.1.4.803:=2)"
#
#     searchFileter = "(&"
#     searchFileter += "(" + filter_person + ")"
#     searchFileter += "(" + filter_not_disabled + ")"
#     searchFileter += "(" + filter_spn + "))"
#
#     search_base ="DC=lohack,DC=com"
#     attributes=['servicePrincipalName', 'sAMAccountName', 'pwdLastSet', 'MemberOf','userAccountControl','lastLogon']
#
#     # 执行搜索
#
#     resp = conn.extend.standard.paged_search(search_base=search_base,
#                         search_filter=searchFileter,
#                         attributes=attributes,
#                         search_scope=SUBTREE
#                         )
#
#
#     for entry in resp:
#         print(entry)

