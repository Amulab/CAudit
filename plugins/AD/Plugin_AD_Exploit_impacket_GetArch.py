import argparse
from copy import copy

from impacket.dcerpc.v5.epm import MSRPC_UUID_PORTMAP
from impacket.dcerpc.v5.rpcrt import DCERPCException
from impacket.dcerpc.v5.transport import DCERPCTransportFactory

from plugins.AD import PluginAdExploitBase
from utils import output
from utils.consts import AllPluginTypes


class PluginADImpacketGetArch(PluginAdExploitBase):
    display = "get arch"
    alias = "imp_get_arch"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display
        parser.add_argument("-t", "--target", help="<targetName or address>", required=True, dest="target")
        parser.add_argument("-u", "--username", help="username", required=True, dest="username")
        parser.add_argument("-p", "--password", help="password", required=True, dest="password")

        parser.add_argument('--targets', type=argparse.FileType('r'),
                            help='input file with targets system to query Arch '
                                 'from (one per line). ')
        parser.add_argument('--timeout', action='store', default='2',
                            help='socket timeout out when connecting to the target (default 2 sec)')

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)

        try:
            getArch = TARGETARCH(args)
            getArch.run()
        except (Exception, KeyboardInterrupt) as e:
            output.error(str(e))

        return result


class TARGETARCH:
    def __init__(self, options):
        self.__machinesList = list()
        self.__options = options
        self.NDR64Syntax = ('71710533-BEBA-4937-8319-B5DBEF9CCC36', '1.0')

    def run(self):
        if self.__options.targets is not None:
            for line in self.__options.targets.readlines():
                self.__machinesList.append(line.strip(' \r\n'))
        else:
            self.__machinesList.append(self.__options.target)

        output.info('Gathering OS architecture for %d machines' % len(self.__machinesList))
        output.info('Socket connect timeout set to %s secs' % self.__options.timeout)

        for machine in self.__machinesList:
            try:
                stringBinding = r'ncacn_ip_tcp:%s[135]' % machine
                transport = DCERPCTransportFactory(stringBinding)
                transport.set_connect_timeout(int(self.__options.timeout))
                dce = transport.get_dce_rpc()
                dce.connect()
                try:
                    dce.bind(MSRPC_UUID_PORTMAP, transfer_syntax=self.NDR64Syntax)
                except DCERPCException as e:
                    if str(e).find('syntaxes_not_supported') >= 0:
                        output.info('%s is 32-bit' % machine)
                    else:
                        output.error(str(e))
                        pass
                else:
                    output.info('%s is 64-bit' % machine)

                dce.disconnect()
            except Exception as e:
                #import traceback
                #traceback.print_exc()
                output.error('%s: %s' % (machine, str(e)))
