import argparse
from copy import copy

import requests
import xmltodict

from plugins.VCenter import PluginVCenterBase
from utils import output
from utils.consts import AllPluginTypes


class PluginVCenterVersionInfo(PluginVCenterBase):
    display = "VCenter 版本探测"
    alias = "vc_ver"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display

        parser.add_argument("-i", "--ip", help="target ip address", dest="address")
        parser.add_argument("-p", "--proxy", help="proxy", dest="proxy")


    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)
        address = args.address
        proxy = args.proxy

        SM_TEMPLATE = b"""<env:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:env="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <env:Body>
                  <RetrieveServiceContent xmlns="urn:vim25">
                    <_this type="ServiceInstance">ServiceInstance</_this>
                  </RetrieveServiceContent>
                  </env:Body>
                  </env:Envelope>"""

        resp = requests.post(f"https://{address}/sdk", verify=False,
                             timeout=5, data=SM_TEMPLATE, proxies=proxy)
        xd = xmltodict.parse(resp.content)
        about_dict = xd['soapenv:Envelope']['soapenv:Body']['RetrieveServiceContentResponse']['returnval']['about']
        [output.info('\t', ':\t'.join((k, v))) for k, v in about_dict.items()]

        return result